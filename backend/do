#!/usr/bin/env bash

## run: Run the server
function task_run {
  uv run python -m uvicorn lexloop.main:app
}

## fmt: Formats all files
function task_fmt {
  uv run ruff format
}

## fmt-check: Exits with non-zero code if any files would be formatted
function task_fmt_check {
  uv run ruff format --check
}

## tests: Run unit tests
function task_test {
  npx supabase start
  # Export dynamic supabase connection values
  eval "$(npx supabase status --output json 2>/dev/null | jq -r '"export SUPABASE_URL=\(.API_URL)\nexport SUPABASE_SERVICE_ROLE_KEY=\(.SERVICE_ROLE_KEY)\nexport SUPABASE_ANON_KEY=\(.ANON_KEY)"')"

  uv run pytest .
}

## lint: Runs static linting, including fixes for local development
function task_lint {
  uv run ruff check --fix
}

## lint-check: Runs static linting without automatic fixes for CI
function task_lint_check {
  uv run ruff check
}

## types: Statically verify types
function task_types {
  uv run mypy .
}

## quality-gates: Run quality checks for deployment confidence
function task_quality_gates {
  task_fmt
  task_lint
  task_types
  task_test
}

## build: creates a .zip-bundle ready for deployment as lambda
function task_build {
  build_dir_name="lex-api-bundle"
  rm -rf $build_dir_name
  mkdir -p $build_dir_name
  uv sync --no-dev
  python_version=$(cat .python-version)
  site_packages_path=".venv/lib/python${python_version}/site-packages"
  cp -r "$site_packages_path"/* $build_dir_name
  cp -r lexloop "$build_dir_name/lexloop"
  zip -r "${build_dir_name}.zip" $build_dir_name
  rm -rf $build_dir_name
}

function task_setup {
  if ! command -v uv >/dev/null 2>&1; then
    curl -LsSf https://astral.sh/uv/install.sh | sh
  fi
}

#-------- All task definitions go above this line --------#

# Bash Strict Mode - For details, see
# https://gist.github.com/mohanpedala/1e2ff5661761d3abd0385e8223e16425
set -u     # Raise error when using undefined variables
set -e     # Raise error if any command has a non-zero exit status
# set -x   # Enable this optionally to print every command executed by bash
set -o pipefail  # Prevent pipelines from masking errors

function task_usage {
    echo "Usage: $0"
    sed -n 's/^##//p' <"$0" | column -t -s ':' |  sed -E $'s/^/\t/'
}

cmd=${1:-}
shift || true
resolved_command=$(echo "task_${cmd}" | sed 's/-/_/g')
if [[ "$(LC_ALL=C type -t "${resolved_command}")" == "function" ]]; then
    pushd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null
    ${resolved_command} "$@"
else
    task_usage
    if [ -n "${cmd}" ]; then
      echo "'$cmd' could not be resolved - please use one of the above tasks"
      exit 1
    fi
fi
