#!/usr/bin/env bash

## quality-gates: Run quality checks for deployment confidence
function task_quality_gates {
  task_fmt
  task_lint
  echo "Infrastructure passes quality gates ✅"
}

## fmt: apply automatic formatting
function task_fmt {
	terraform fmt -recursive .
}

## fmt-check: confirm that automatic formatting is applied. Useful for CI/CD
function task_fmt_check {
	@echo "Checking Terraform formatting..."
	terraform fmt -recursive -check .
}

## lint: Perform some static linting/validation
function task_lint {
	pushd base
	terraform init -reconfigure
	terraform validate
	popd

	pushd env/dev
	terraform init -reconfigure
	terraform validate
	popd
}

## apply-auto: Apply the infrastructure with auto-approve. Used for CI/CD.
function task_apply_auto {
	if [ -z "${1:-}" ]; then echo "Error: environment not specified. Usage: $0 apply-auto <dev|prod>"; exit 1; fi
	pushd "env/$1"
	terraform init -reconfigure
	terraform apply -auto-approve
	popd
}

## apply: Apply the infrastructure.
function task_apply {
	if [ -z "${1:-}" ]; then echo "Error: environment not specified. Usage: $0 apply <dev|prod>"; exit 1; fi
	pushd "env/$1"
	terraform init -reconfigure
	terraform apply
	popd
}

## plan: Show the terraform plan.
function task_plan {
	if [ -z "${1:-}" ]; then echo "Error: environment not specified. Usage: $0 plan <dev|prod>"; exit 1; fi
	pushd "env/$1"
	terraform init -reconfigure
	terraform plan
	popd
}

## deploy-base: Deploy the base infrastructure
function task_deploy_base {
  echo "Deploying base infrastructure..."
  create_base_bucket
  pushd base
  terraform init -reconfigure
  terraform apply
  popd
  echo "Base infrastructure deployed successfully ✅"
}

function create_base_bucket {
  echo "Creating base infrastructure S3 bucket..."
  
  # Create bucket (ignore if already exists)
  if ! aws s3api head-bucket --bucket lexloop-base-tfstate --region eu-central-1 2>/dev/null; then
    aws s3api create-bucket --bucket lexloop-base-tfstate --region eu-central-1 --create-bucket-configuration LocationConstraint=eu-central-1
    echo "Bucket created"
  else
    echo "Bucket already exists"
  fi
  
  # Configure bucket settings (these are idempotent)
  aws s3api put-bucket-versioning --bucket lexloop-base-tfstate --versioning-configuration Status=Enabled --region eu-central-1
  aws s3api put-bucket-encryption --bucket lexloop-base-tfstate --server-side-encryption-configuration '{
    "Rules": [
      {
        "ApplyServerSideEncryptionByDefault": {
          "SSEAlgorithm": "AES256"
        }
      }
    ]
  }' --region eu-central-1
  echo "Base bucket configured successfully ✅"
}

#-------- All task definitions go above this line --------#

# Bash Strict Mode - For details, see
# https://gist.github.com/mohanpedala/1e2ff5661761d3abd0385e8223e16425
set -u     # Raise error when using undefined variables
set -e     # Raise error if any command has a non-zero exit status
# set -x   # Enable this optionally to print every command executed by bash
set -o pipefail  # Prevent pipelines from masking errors

function task_usage {
    echo "Usage: $0"
    sed -n 's/^##//p' <"$0" | column -t -s ':' |  sed -E $'s/^/\t/'
}

cmd=${1:-}
shift || true
resolved_command=$(echo "task_${cmd}" | sed 's/-/_/g')
if [[ "$(LC_ALL=C type -t "${resolved_command}")" == "function" ]]; then
    pushd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null
    ${resolved_command} "$@"
else
    task_usage
    if [ -n "${cmd}" ]; then
      echo "'$cmd' could not be resolved - please use one of the above tasks"
      exit 1
    fi
fi
